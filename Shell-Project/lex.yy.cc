#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[367] =
    {   0,
        0,    0,   19,   16,    2,    1,    2,   16,   16,    6,
       16,    4,    3,   12,   16,    7,   11,   16,    0,   16,
        0,   12,    0,   16,    0,    0,   16,   16,    0,   12,
       16,   16,    9,    0,    8,    5,   12,   12,   12,   12,
       12,   16,   11,   11,   11,   11,    0,   17,    0,   17,
       16,   17,    0,   12,   12,   12,   12,   12,   12,   16,
        0,    0,   16,   14,    0,   12,   16,    0,   16,    0,
       12,    0,   10,   12,   12,   12,   16,   11,   11,   11,
       11,   11,   11,   11,    0,    0,   16,    0,   16,   16,
        0,   12,    0,   12,   12,   12,   12,    0,   14,   14,

       16,    0,   14,   12,   12,   12,   12,   12,   12,   13,
       13,    0,   12,   13,   12,   12,   12,   12,   12,   12,
       16,   11,   11,   11,   11,   11,   11,   11,   11,   17,
        0,   13,   13,   17,    0,   12,   13,   12,   12,   12,
       12,   12,   12,   12,    0,   16,    0,   16,   14,    0,
       12,    0,   12,   12,   12,   12,   13,   13,   13,   13,
       12,   13,   12,   12,   12,   13,   12,   12,   12,   12,
       12,   16,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   13,   13,   12,   13,   13,
       12,   12,   12,   12,   13,   13,   12,   12,   12,   12,

       12,   12,    0,   14,   13,   13,    0,   14,   12,   13,
       12,   12,   12,   12,   12,   12,   12,   13,   13,   12,
       12,   13,   12,   16,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   12,
       12,   12,   13,   12,   13,   13,   13,   13,   13,   12,
       13,   13,   12,   12,   12,   12,   13,   13,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   12,   13,
       12,   13,   12,   12,   12,   12,   12,   15,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   12,   13,
       13,   12,   13,   13,   12,   12,   12,   12,   12,   12,

       13,   13,   12,   12,   12,   13,   12,   13,   13,   13,
       12,   12,   12,   12,   15,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   13,   12,
       13,   13,   12,   13,   13,   12,   12,   12,   12,   12,
       12,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       12,   12,   12,   12,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,    1,    1,    1,   14,    1,

       15,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       16,    1,    1,   17,   18,    1,   19,    1,    1,    1,
        1,    1,   20,   21,   22,   23,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[24] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[461] =
    {   0,
        0,    0,  351,   22,  344, 3614, 3614,   42,   62,   17,
       18,   19,   82,   94,   25,   47,  114,   32,  339,  335,
       56,  134,   30,  154,   61,  337,   51,  318,  174,  186,
      206,  226,   74,  247,   79,  266,   84,    0,  313,   96,
        0,   53,  278,  312,   97,  298,   71,  325,  316, 3614,
      335,   99,  356,  375,  387,    0,  310,  407,    0,  419,
      113,  320,  306,    0,  439,  451,  471,  102,    0,  492,
      513,  534,  112,  555,  126,  574,  113,  595,  616,  132,
      635,  305,  135,    0,  107,  653,  674,  693,    0,    0,
      714,  735,  756,  148,  298,    0,  777,  796,  159,  308,

      815,  836,  296,  855,  867,  289,    0,  887,    0,  899,
      301,  919,  940,  151,  284,  281,  961,  280,  982, 1002,
      163, 1023,    0, 1044, 1065, 1086, 1107,  168, 1126,  163,
     1145, 1166,  138, 1186,  273, 1207, 1228,  266,  244,  242,
     1240,  235, 1261,  234, 1279, 1300, 1319,    0,    0, 1340,
     1361, 1382,  224,    0,    0, 1403, 1424,  237,  214,  180,
     1444,   36, 1464, 1485,  198, 1506,  200,    0,  206,  203,
        0,  181, 1525, 1545, 1566,  218,  181,  175, 1587,  173,
     1608, 1628, 1649,  217,    0,  174, 1669, 1681,  178, 1699,
     1718,    0,    0, 1739,  223,  153, 1751,    0,    0,  152,

        0,    0, 1761, 1780, 1801,  231,  140,  130, 1821, 1842,
      129,  127,  109, 1854,  101, 1875,   89, 1895,  208, 1916,
      239, 1935, 1956,  238, 1977,   84,  248, 1997, 2017, 2038,
      249, 2059,  257,    0,   71,  263,    0, 2078, 2097,  269,
       59,    0, 2118, 2139, 2160,  277,   58,    0, 2180, 2192,
     2210,  283,    0,    0,    0, 2229,   37,    0, 2241,    0,
       31,    0,    0,    0, 2253,  211,    0, 2274, 2295,  271,
     2316, 2337, 2358,    0,    0, 2379,    0,    0, 2400, 2421,
      272, 2440, 2461, 2482, 2501,    0,    0, 2522, 2543,  290,
     2562, 2583, 2604,    0, 2625,    0,    0,    0,    0,    0,

     2646, 2665,   12,    0,    0, 2686, 2707, 2728,   25,  292,
     2748, 2768, 2789,  295,    0, 2810,    0, 2831, 2852, 2873,
     2894, 2915,    0,    0, 2936,    0, 2957,  309, 2977, 2989,
     3009,    0,    0,    0, 3030, 3049,    0,    0, 3070, 3091,
     3110, 3129, 3150,    0,    0, 3171,    0,    0,    0,    0,
        0, 3192,  321, 3212, 3232, 3253,  322, 3274,  340, 3294,
     3306,    0,    0,    0,    0, 3614, 3327, 3329, 3331, 3335,
     3337, 3339, 3341, 3345, 3349, 3353, 3357, 3361, 3363, 3365,
     3367, 3369, 3371, 3375, 3379, 3383, 3387, 3391, 3395, 3397,
     3399, 3401, 3403, 3407, 3411, 3415, 3419, 3423, 3425, 3427,

     3429, 3431, 3433, 3435, 3437, 3441, 3445, 3449, 3453, 3457,
     3461, 3465, 3469, 3471, 3473, 3475, 3477, 3479, 3483, 3487,
     3491, 3495, 3499, 3503, 3505, 3507, 3509, 3511, 3513, 3517,
     3521, 3525, 3529, 3533,   28, 3535, 3537, 3539, 3541, 3545,
     3549, 3553, 3557, 3561, 3563, 3565, 3567, 3569, 3571, 3575,
     3579, 3583, 3587, 3591, 3593, 3595, 3597, 3601, 3605, 3609
    } ;

static const flex_int16_t yy_def[461] =
    {   0,
      366,    1,  366,  367,  368,  366,  366,  369,  367,    9,
        9,    9,  370,  371,    9,  370,  372,    9,  368,    9,
      370,  371,  368,  369,  373,  374,    9,   24,  375,  376,
      377,  378,  370,  370,  370,  370,  379,   22,   22,  379,
       22,    9,  372,   43,  380,  381,  382,  368,  373,  366,
      383,  370,  375,  384,  376,   22,   55,  384,   55,  377,
      385,  386,   60,   60,  387,  388,  378,  382,   67,  389,
      390,  389,  370,  379,  379,  390,    9,  391,  380,  392,
      381,   81,  392,   81,  382,  393,  383,  393,   67,   87,
      394,  395,  394,  379,   58,   58,  395,  385,  385,  386,

      396,  387,  102,  397,  388,  105,  105,  397,  105,  398,
      399,  389,  400,  401,   76,   76,  400,   76,  402,  400,
        9,  391,  122,  403,  404,  403,  392,  392,  404,  382,
      393,  405,  406,  389,   93,  407,  408,   97,   76,   97,
      407,   97,  409,  141,  410,  396,  410,  146,  146,  411,
      412,  411,  108,  108,  108,  412,  398,  399,  157,  401,
      402,  399,  400,  400,  413,  401,  413,  161,  161,  413,
      161,    9,  414,  403,  415,  416,  129,  129,  415,  129,
      417,  415,  405,  406,  157,  183,  408,  409,  399,  406,
      400,  141,  141,  418,  401,  187,  418,  188,  161,  188,

      197,  188,  410,  410,  419,  420,  152,  152,  421,  422,
      156,  156,  156,  421,  156,  423,  214,  424,  425,  413,
      413,  426,  427,    9,  414,  225,  416,  417,  415,  415,
      428,  416,  428,  228,  228,  428,  228,  429,  430,  413,
      197,  197,  431,  432,  419,  420,  245,  245,  422,  423,
      420,  420,  214,  214,  214,  433,  249,  249,  433,  250,
      250,  250,  259,  250,  424,  425,  265,  426,  427,  425,
      434,  426,  434,  269,  269,  434,  269,  435,  436,  428,
      428,  437,  438,  429,  430,  265,  284,  431,  432,  425,
      430,  439,  426,  288,  439,  289,  269,  289,  295,  289,

      440,  441,  259,  259,  259,  442,  443,  444,  445,  446,
      447,  434,  434,  413,  435,  436,  316,  437,  438,  448,
      437,  448,  319,  319,  448,  319,  449,  450,  451,  452,
      434,  295,  295,  197,  440,  441,  335,  335,  442,  443,
      441,  441,  453,  339,  339,  453,  340,  340,  340,  346,
      340,  454,  455,  456,  448,  448,  428,  457,  458,  459,
      460,  346,  346,  346,  259,    0,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366
    } ;

static const flex_int16_t yy_nxt[3638] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,    4,   11,
       12,   13,   14,    4,    4,    4,    4,   15,    4,    4,
       16,    4,   17,   19,   18,   18,   18,   20,  315,   33,
      162,  343,   18,   21,   22,   23,   18,   18,   18,   18,
       42,  162,   21,   25,   18,   26,   27,   28,   19,   47,
      307,   18,   34,   29,   30,  219,  306,   19,   18,   37,
       18,   34,   29,   19,   26,   48,   49,   20,   37,   31,
       18,   77,   18,   21,   22,   19,   85,  301,  292,   34,
       19,   32,   21,   19,   34,   19,   37,   34,   35,   74,
      283,   37,   19,   36,   37,   19,   75,   19,   19,   39,

       19,   74,   79,  279,   34,   40,   41,   85,   75,   80,
      108,   37,   85,   19,   40,   19,   62,   34,   98,   44,
       18,   99,  216,  111,   37,   45,   46,   19,  111,  121,
      216,   74,   18,   19,   45,   19,   19,  127,   75,   39,
      127,   26,  189,  190,  128,   40,   41,  128,  216,   19,
      216,  210,  158,   74,   40,   25,  166,   26,   27,   28,
       75,  210,   62,  167,   98,   29,   30,   99,   85,   19,
       18,  244,  243,  127,   29,   25,  172,   26,   52,   53,
      128,  158,   18,  162,  111,  166,   54,   25,   18,   26,
       56,   57,  167,  238,  181,  224,  181,   58,   59,  158,

       18,  158,  181,  220,  158,  220,   58,   61,  220,   62,
      221,   63,  221,  270,   64,  221,  270,   65,   66,  158,
       26,  189,  190,  232,  158,  223,   65,   68,  166,  158,
      233,   69,  309,  218,   62,  167,  251,   70,   71,  252,
      158,  278,  162,  217,  220,   18,   70,   18,   19,  158,
      158,  221,   34,  232,  280,   58,  143,   18,  158,   37,
      233,  281,  280,  143,  158,  119,   72,   19,  280,  281,
      158,   34,   73,  158,  220,  281,  270,  280,   37,   19,
       62,  221,  251,   44,  281,  252,   62,  143,  251,   45,
       46,  252,  309,  158,  137,  270,  158,  166,   45,   19,

      220,  119,  119,   82,  167,  119,  162,  221,  156,   83,
       84,  309,   26,  189,  190,   65,  100,  144,   83,   26,
       48,   49,  158,  158,  129,  101,  232,  280,  100,   97,
       23,   78,   76,  233,  281,   86,   88,   51,   26,   89,
       90,   50,   18,   62,   23,  251,   91,   92,  252,   23,
      366,  366,  366,  366,  366,   91,   24,   25,  366,   26,
       52,   53,  366,  366,  366,  366,  366,  366,   54,  366,
      366,  366,  366,  366,  366,   93,   25,  366,   26,   94,
       95,  366,  366,  366,  366,  366,  366,   96,   25,  366,
       26,   56,   57,  366,  366,  366,  366,  366,   58,   59,

      366,  366,  366,  366,  366,  366,  366,   58,   25,  366,
       26,   94,   95,  366,  366,  366,  366,  366,  366,   96,
       61,  366,   62,  366,   63,  366,  366,   64,  366,  366,
       65,   66,  366,  366,  366,  366,  366,  366,  366,   65,
       61,  366,   62,  366,  102,  366,  366,  103,  366,  366,
      366,  104,   61,  366,   62,  366,  106,  366,  366,  107,
      366,  366,  108,  109,  366,  366,  366,  366,  366,  366,
      366,  108,   68,  366,  366,  366,   69,  366,  366,  366,
      366,  366,   70,   71,  366,  366,  366,  366,  366,  366,
      366,   70,  110,   68,  366,  366,  366,  112,  366,  366,

      366,  366,  366,  366,  113,  366,  366,  366,  366,  366,
      366,  366,  366,  114,   68,  366,  366,  366,  116,  366,
      366,  366,  366,  366,  117,  118,  366,  366,  366,  366,
      366,  366,  366,  117,  119,   68,  366,  366,  366,  112,
      366,  366,  366,  366,  366,  366,  113,  366,  366,  366,
      366,  366,  366,  366,  366,   21,   19,  366,  366,  366,
       74,  366,  366,  366,  366,  366,  366,   75,  366,  366,
      366,  366,  366,  366,  120,   68,  366,  366,  366,  116,
      366,  366,  366,  366,  366,  117,  118,  366,  366,  366,
      366,  366,  366,  366,  117,   38,   68,  366,  366,  366,

      123,  366,  366,  366,  366,  366,  124,  125,  366,  366,
      366,  366,  366,  366,  366,  124,   43,   19,  366,  366,
      366,   79,  366,  366,  366,  366,  366,  366,   80,  366,
      366,  366,  366,  366,  366,  126,   19,  366,  366,  366,
       82,  366,  366,  366,  366,  366,   83,   84,  366,  366,
      366,  366,  366,  366,  366,   83,   26,  130,  131,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,   25,   88,  366,   26,   89,   90,
      366,  366,  366,  366,  366,   91,   92,  366,  366,  366,
      366,  366,  366,  366,   91,  132,   26,  130,  131,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  133,   88,  366,   26,  134,  135,
      366,  366,  366,  366,  366,  366,  136,  366,  366,  366,
      366,  366,  366,  366,  366,  137,   88,  366,   26,  139,
      140,  366,  366,  366,  366,  366,  141,  142,  366,  366,
      366,  366,  366,  366,  366,  141,  143,   88,  366,   26,
      134,  135,  366,  366,  366,  366,  366,  366,  136,  366,
      366,  366,  366,  366,  366,  366,  366,   29,   88,  366,
       26,  139,  140,  366,  366,  366,  366,  366,  141,  142,
      366,  366,  366,  366,  366,  366,  366,  141,   55,   62,

      366,   98,  366,  366,   99,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  145,  147,  366,   62,  366,
      148,  366,  366,  149,  366,  366,  150,  151,  366,  366,
      366,  366,  366,  366,  366,  150,   60,   61,  366,   62,
      366,  102,  366,  366,  103,  366,  366,  366,  104,  366,
      366,  366,  366,  366,  366,  152,   61,  366,   62,  366,
      153,  366,  366,  154,  366,  366,  366,  155,   61,  366,
       62,  366,  106,  366,  366,  107,  366,  366,  108,  109,
      366,  366,  366,  366,  366,  366,  366,  108,   61,  366,
       62,  366,  153,  366,  366,  154,  366,  366,  366,  155,

      158,  366,  366,  366,  159,  366,  366,  366,  366,  366,
      160,  161,  366,  366,  366,  366,  366,  366,  366,  160,
       68,  366,  366,  366,  112,  366,  366,  366,  366,  366,
      366,  113,  366,  366,  366,  366,  366,  366,  366,  366,
      114,   68,  366,  366,  366,  163,  366,  366,  366,  366,
      366,  366,  164,  366,  366,  366,  366,  366,  366,  366,
      366,  165,   68,  366,  366,  366,  163,  366,  366,  366,
      366,  366,  366,  164,  366,  366,  366,  366,  366,  366,
      366,  366,  165,  158,  366,  366,  366,  169,  366,  366,
      366,  366,  366,  170,  171,  366,  366,  366,  366,  366,

      366,  366,  170,   68,  366,  366,  366,  163,  366,  366,
      366,  366,  366,  366,  164,  366,  366,  366,  366,  366,
      366,  366,  366,   40,   68,  366,  366,  366,  123,  366,
      366,  366,  366,  366,  124,  125,  366,  366,  366,  366,
      366,  366,  366,  124,  173,   68,  366,  366,  366,  174,
      366,  366,  366,  366,  366,  366,  175,  366,  366,  366,
      366,  366,  366,  366,  366,  176,   68,  366,  366,  366,
      178,  366,  366,  366,  366,  366,  179,  180,  366,  366,
      366,  366,  366,  366,  366,  179,  181,   68,  366,  366,
      366,  174,  366,  366,  366,  366,  366,  366,  175,  366,

      366,  366,  366,  366,  366,  366,  366,   45,   19,  366,
      366,  366,  127,  366,  366,  366,  366,  366,  366,  128,
      366,  366,  366,  366,  366,  366,  182,   68,  366,  366,
      366,  178,  366,  366,  366,  366,  366,  179,  180,  366,
      366,  366,  366,  366,  366,  366,  179,   81,   26,  130,
      131,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  133,  184,  366,   26,
      185,  186,  366,  366,  366,  366,  366,  187,  188,  366,
      366,  366,  366,  366,  366,  366,  187,   68,  366,  366,
      366,  112,  366,  366,  366,  366,  366,  366,  113,  366,

      366,  366,  366,  366,  366,  366,  366,  114,   88,  366,
       26,  191,  192,  366,  366,  366,  366,  366,  366,  193,
      366,  366,  366,  366,  366,  366,  366,  366,  194,  184,
      366,   26,  195,  196,  366,  366,  366,  366,  366,  366,
      197,   88,  366,   26,  191,  192,  366,  366,  366,  366,
      366,  366,  193,  366,  366,  366,  366,  366,  366,  366,
      366,  194,  184,  366,   26,  199,  200,  366,  366,  366,
      366,  366,  201,  202,  366,  366,  366,  366,  366,  366,
      366,  201,   62,  366,  203,  366,  366,  204,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

       61,  147,  366,   62,  366,  148,  366,  366,  149,  366,
      366,  150,  151,  366,  366,  366,  366,  366,  366,  366,
      150,  205,   62,  366,  203,  366,  366,  204,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      206,  147,  366,   62,  366,  207,  366,  366,  208,  366,
      366,  366,  209,  366,  366,  366,  366,  366,  366,  366,
      366,  210,  147,  366,   62,  366,  212,  366,  366,  213,
      366,  366,  214,  215,  366,  366,  366,  366,  366,  366,
      366,  214,  216,  147,  366,   62,  366,  207,  366,  366,
      208,  366,  366,  366,  209,  366,  366,  366,  366,  366,

      366,  366,  366,   65,  147,  366,   62,  366,  212,  366,
      366,  213,  366,  366,  214,  215,  366,  366,  366,  366,
      366,  366,  366,  214,  105,  158,  366,  366,  366,  159,
      366,  366,  366,  366,  366,  160,  161,  366,  366,  366,
      366,  366,  366,  366,  160,  158,  366,  366,  366,  169,
      366,  366,  366,  366,  366,  170,  171,  366,  366,  366,
      366,  366,  366,  366,  170,   68,  366,  366,  366,  163,
      366,  366,  366,  366,  366,  366,  164,  366,  366,  366,
      366,  366,  366,  366,  366,  165,   68,  366,  366,  366,
      163,  366,  366,  366,  366,  366,  366,  164,  366,  366,

      366,  366,  366,  366,  366,  366,  165,  158,  366,  366,
      366,  166,  366,  366,  366,  366,  366,  366,  167,  366,
      366,  366,  366,  366,  366,  222,  158,  366,  366,  366,
      226,  366,  366,  366,  366,  366,  227,  228,  366,  366,
      366,  366,  366,  366,  366,  227,   68,  366,  366,  366,
      174,  366,  366,  366,  366,  366,  366,  175,  366,  366,
      366,  366,  366,  366,  366,  366,  176,   68,  366,  366,
      366,  229,  366,  366,  366,  366,  366,  366,  230,  366,
      366,  366,  366,  366,  366,  366,  366,  231,   68,  366,
      366,  366,  229,  366,  366,  366,  366,  366,  366,  230,

      366,  366,  366,  366,  366,  366,  366,  366,  231,  158,
      366,  366,  366,  235,  366,  366,  366,  366,  366,  236,
      237,  366,  366,  366,  366,  366,  366,  366,  236,   68,
      366,  366,  366,  229,  366,  366,  366,  366,  366,  366,
      230,  366,  366,  366,  366,  366,  366,  366,  366,   83,
      184,  366,   26,  185,  186,  366,  366,  366,  366,  366,
      187,  188,  366,  366,  366,  366,  366,  366,  366,  187,
      184,  366,   26,  195,  196,  366,  366,  366,  366,  366,
      366,  197,  184,  366,   26,  199,  200,  366,  366,  366,
      366,  366,  201,  202,  366,  366,  366,  366,  366,  366,

      366,  201,   26,  189,  190,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  239,   68,
      366,  366,  366,  163,  366,  366,  366,  366,  366,  366,
      164,  366,  366,  366,  366,  366,  366,  366,  366,  165,
      184,  366,   26,  240,  241,  366,  366,  366,  366,  366,
      366,  242,  184,  366,   26,  240,  241,  366,  366,  366,
      366,  366,  366,  242,   62,  366,  203,  366,  366,  204,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  206,   62,  366,  203,  366,  366,  204,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  206,  246,  366,   62,  366,  247,  366,  366,  248,
      366,  366,  249,  250,  366,  366,  366,  366,  366,  366,
      366,  249,  147,  366,   62,  366,  253,  366,  366,  254,
      366,  366,  366,  255,  366,  366,  366,  366,  366,  366,
      366,  366,  256,  246,  366,   62,  366,  257,  366,  366,
      258,  366,  366,  366,  259,  147,  366,   62,  366,  253,
      366,  366,  254,  366,  366,  366,  255,  366,  366,  366,
      366,  366,  366,  366,  366,  256,  246,  366,   62,  366,
      261,  366,  366,  262,  366,  366,  263,  264,  366,  366,
      366,  366,  366,  366,  366,  263,  266,  366,  366,  366,

      267,  366,  366,  366,  366,  366,  268,  269,  366,  366,
      366,  366,  366,  366,  366,  268,  157,  158,  366,  366,
      366,  220,  366,  366,  366,  366,  366,  366,  221,  366,
      366,  366,  366,  366,  366,  271,  266,  366,  366,  366,
      272,  366,  366,  366,  366,  366,  366,  273,  366,  366,
      366,  366,  366,  366,  366,  366,  160,  266,  366,  366,
      366,  275,  366,  366,  366,  366,  366,  276,  277,  366,
      366,  366,  366,  366,  366,  366,  276,  168,  158,  366,
      366,  366,  226,  366,  366,  366,  366,  366,  227,  228,
      366,  366,  366,  366,  366,  366,  366,  227,  158,  366,

      366,  366,  235,  366,  366,  366,  366,  366,  236,  237,
      366,  366,  366,  366,  366,  366,  366,  236,   68,  366,
      366,  366,  229,  366,  366,  366,  366,  366,  366,  230,
      366,  366,  366,  366,  366,  366,  366,  366,  231,   68,
      366,  366,  366,  229,  366,  366,  366,  366,  366,  366,
      230,  366,  366,  366,  366,  366,  366,  366,  366,  231,
      158,  366,  366,  366,  232,  366,  366,  366,  366,  366,
      366,  233,  366,  366,  366,  366,  366,  366,  282,  285,
      366,   26,  286,  287,  366,  366,  366,  366,  366,  288,
      289,  366,  366,  366,  366,  366,  366,  366,  288,  183,

       26,  290,  291,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  184,  285,
      366,   26,  293,  294,  366,  366,  366,  366,  366,  366,
      295,  366,  366,  366,  366,  366,  366,  366,  366,  187,
      285,  366,   26,  297,  298,  366,  366,  366,  366,  366,
      299,  300,  366,  366,  366,  366,  366,  366,  366,  299,
      198,  246,  366,   62,  366,  247,  366,  366,  248,  366,
      366,  249,  250,  366,  366,  366,  366,  366,  366,  366,
      249,  246,  366,   62,  366,  257,  366,  366,  258,  366,
      366,  366,  259,  246,  366,   62,  366,  261,  366,  366,

      262,  366,  366,  263,  264,  366,  366,  366,  366,  366,
      366,  366,  263,   62,  366,  251,  366,  366,  252,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  302,
      246,  366,   62,  366,  303,  366,  366,  304,  366,  366,
      366,  305,  246,  366,   62,  366,  303,  366,  366,  304,
      366,  366,  366,  305,  266,  366,  366,  366,  267,  366,
      366,  366,  366,  366,  268,  269,  366,  366,  366,  366,
      366,  366,  366,  268,  308,  266,  366,  366,  366,  272,
      366,  366,  366,  366,  366,  366,  273,  366,  366,  366,
      366,  366,  366,  366,  366,  310,  266,  366,  366,  366,

      275,  366,  366,  366,  366,  366,  276,  277,  366,  366,
      366,  366,  366,  366,  366,  276,  311,  266,  366,  366,
      366,  312,  366,  366,  366,  366,  366,  366,  313,  366,
      366,  366,  366,  366,  366,  366,  366,  170,  266,  366,
      366,  366,  272,  366,  366,  366,  366,  366,  366,  273,
      366,  366,  366,  366,  366,  366,  366,  366,  310,  266,
      366,  366,  366,  312,  366,  366,  366,  366,  366,  366,
      313,  366,  366,  366,  366,  366,  366,  366,  366,  314,
      266,  366,  366,  366,  312,  366,  366,  366,  366,  366,
      366,  313,  366,  366,  366,  366,  366,  366,  366,  366,

      314,  266,  366,  366,  366,  317,  366,  366,  366,  366,
      366,  318,  319,  366,  366,  366,  366,  366,  366,  366,
      318,  225,  158,  366,  366,  366,  280,  366,  366,  366,
      366,  366,  366,  281,  366,  366,  366,  366,  366,  366,
      320,  266,  366,  366,  366,  321,  366,  366,  366,  366,
      366,  366,  322,  366,  366,  366,  366,  366,  366,  366,
      366,  227,  266,  366,  366,  366,  324,  366,  366,  366,
      366,  366,  325,  326,  366,  366,  366,  366,  366,  366,
      366,  325,  234,  285,  366,   26,  286,  287,  366,  366,
      366,  366,  366,  288,  289,  366,  366,  366,  366,  366,

      366,  366,  288,  327,   26,  290,  291,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  328,  285,  366,   26,  293,  294,  366,  366,
      366,  366,  366,  366,  295,  366,  366,  366,  366,  366,
      366,  366,  366,  329,  285,  366,   26,  297,  298,  366,
      366,  366,  366,  366,  299,  300,  366,  366,  366,  366,
      366,  366,  366,  299,  330,   26,  290,  291,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  328,  285,  366,   26,  331,  332,  366,
      366,  366,  366,  366,  366,  333,  366,  366,  366,  366,

      366,  366,  366,  366,  201,  266,  366,  366,  366,  272,
      366,  366,  366,  366,  366,  366,  273,  366,  366,  366,
      366,  366,  366,  366,  366,  310,  285,  366,   26,  331,
      332,  366,  366,  366,  366,  366,  366,  333,  366,  366,
      366,  366,  366,  366,  366,  366,  334,  336,  366,   62,
      366,  337,  366,  366,  338,  366,  366,  339,  340,  366,
      366,  366,  366,  366,  366,  366,  339,  245,   62,  366,
      341,  366,  366,  342,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  246,  336,  366,   62,
      366,  344,  366,  366,  345,  366,  366,  366,  346,  366,

      366,  366,  366,  366,  366,  366,  366,  249,  336,  366,
       62,  366,  348,  366,  366,  349,  366,  366,  350,  351,
      366,  366,  366,  366,  366,  366,  366,  350,  260,  158,
      366,  366,  366,  159,  366,  366,  366,  366,  366,  160,
      161,  366,  366,  366,  366,  366,  366,  366,  160,  158,
      366,  366,  366,  169,  366,  366,  366,  366,  366,  170,
      171,  366,  366,  366,  366,  366,  366,  366,  170,  266,
      366,  366,  366,  312,  366,  366,  366,  366,  366,  366,
      313,  366,  366,  366,  366,  366,  366,  366,  366,  314,
      266,  366,  366,  366,  312,  366,  366,  366,  366,  366,

      366,  313,  366,  366,  366,  366,  366,  366,  366,  366,
      314,  266,  366,  366,  366,  317,  366,  366,  366,  366,
      366,  318,  319,  366,  366,  366,  366,  366,  366,  366,
      318,  352,  266,  366,  366,  366,  321,  366,  366,  366,
      366,  366,  366,  322,  366,  366,  366,  366,  366,  366,
      366,  366,  353,  266,  366,  366,  366,  324,  366,  366,
      366,  366,  366,  325,  326,  366,  366,  366,  366,  366,
      366,  366,  325,  354,  266,  366,  366,  366,  355,  366,
      366,  366,  366,  366,  366,  356,  366,  366,  366,  366,
      366,  366,  366,  366,  236,  266,  366,  366,  366,  321,

      366,  366,  366,  366,  366,  366,  322,  366,  366,  366,
      366,  366,  366,  366,  366,  353,  266,  366,  366,  366,
      355,  366,  366,  366,  366,  366,  366,  356,  366,  366,
      366,  366,  366,  366,  366,  366,  357,  266,  366,  366,
      366,  355,  366,  366,  366,  366,  366,  366,  356,  366,
      366,  366,  366,  366,  366,  366,  366,  357,  184,  366,
       26,  185,  186,  366,  366,  366,  366,  366,  187,  188,
      366,  366,  366,  366,  366,  366,  366,  187,  184,  366,
       26,  195,  196,  366,  366,  366,  366,  366,  366,  197,
      184,  366,   26,  199,  200,  366,  366,  366,  366,  366,

      201,  202,  366,  366,  366,  366,  366,  366,  366,  201,
      266,  366,  366,  366,  312,  366,  366,  366,  366,  366,
      366,  313,  366,  366,  366,  366,  366,  366,  366,  366,
      314,  336,  366,   62,  366,  337,  366,  366,  338,  366,
      366,  339,  340,  366,  366,  366,  366,  366,  366,  366,
      339,  358,   62,  366,  341,  366,  366,  342,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      359,  336,  366,   62,  366,  344,  366,  366,  345,  366,
      366,  366,  346,  366,  366,  366,  366,  366,  366,  366,
      366,  360,  336,  366,   62,  366,  348,  366,  366,  349,

      366,  366,  350,  351,  366,  366,  366,  366,  366,  366,
      366,  350,  361,   62,  366,  341,  366,  366,  342,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  359,   62,  366,  341,  366,  366,  342,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      359,  336,  366,   62,  366,  362,  366,  366,  363,  366,
      366,  366,  364,  366,  366,  366,  366,  366,  366,  366,
      366,  263,  336,  366,   62,  366,  362,  366,  366,  363,
      366,  366,  366,  364,  366,  366,  366,  366,  366,  366,
      366,  366,  365,  158,  366,  366,  366,  226,  366,  366,

      366,  366,  366,  227,  228,  366,  366,  366,  366,  366,
      366,  366,  227,  158,  366,  366,  366,  235,  366,  366,
      366,  366,  366,  236,  237,  366,  366,  366,  366,  366,
      366,  366,  236,  266,  366,  366,  366,  355,  366,  366,
      366,  366,  366,  366,  356,  366,  366,  366,  366,  366,
      366,  366,  366,  357,  266,  366,  366,  366,  355,  366,
      366,  366,  366,  366,  366,  356,  366,  366,  366,  366,
      366,  366,  366,  366,  357,  246,  366,   62,  366,  247,
      366,  366,  248,  366,  366,  249,  250,  366,  366,  366,
      366,  366,  366,  366,  249,  246,  366,   62,  366,  257,

      366,  366,  258,  366,  366,  366,  259,  246,  366,   62,
      366,  261,  366,  366,  262,  366,  366,  263,  264,  366,
      366,  366,  366,  366,  366,  366,  263,   18,   18,   19,
       19,   24,   24,  366,   24,   21,   21,   38,   38,   43,
       43,   25,   25,  366,   25,   26,   26,  366,   26,   29,
       29,  366,   29,   55,   55,  366,   55,   60,   60,  366,
       60,   67,   67,   40,   40,   45,   45,   81,   81,   68,
       68,   87,   87,  366,   87,   58,   58,  366,   58,   61,
       61,  366,   61,   62,   62,  366,   62,   65,   65,  366,
       65,  105,  105,  366,  105,   70,   70,  115,  115,  122,

      122,   83,   83,   88,   88,  366,   88,   91,   91,  366,
       91,  138,  138,  366,  138,  146,  146,  366,  146,  108,
      108,  366,  108,  157,  157,  158,  158,  117,  117,  160,
      160,  168,  168,  124,  124,  177,  177,  183,  183,  366,
      183,  184,  184,  366,  184,  141,  141,  366,  141,  187,
      187,  366,  187,  198,  198,  366,  198,  147,  147,  366,
      147,  150,  150,  366,  150,  211,  211,  366,  211,  170,
      170,  225,  225,  179,  179,  227,  227,  234,  234,  201,
      201,  366,  201,  245,  245,  366,  245,  246,  246,  366,
      246,  214,  214,  366,  214,  249,  249,  366,  249,  260,

      260,  366,  260,  265,  265,  266,  266,  268,  268,  274,
      274,  236,  236,  284,  284,  366,  284,  285,  285,  366,
      285,  288,  288,  366,  288,  296,  296,  366,  296,  263,
      263,  366,  263,  276,  276,  316,  316,  318,  318,  323,
      323,  299,  299,  366,  299,  335,  335,  366,  335,  336,
      336,  366,  336,  339,  339,  366,  339,  347,  347,  366,
      347,  157,  157,  158,  158,  160,  160,  168,  168,  325,
      325,  183,  183,  366,  183,  184,  184,  366,  184,  187,
      187,  366,  187,  198,  198,  366,  198,  350,  350,  366,
      350,  225,  225,  227,  227,  234,  234,  245,  245,  366,

      245,  246,  246,  366,  246,  249,  249,  366,  249,  260,
      260,  366,  260,    3,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366
    } ;

static const flex_int16_t yy_chk[3638] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,   10,   11,   12,    4,  435,   11,
      309,  303,   15,    4,    4,   23,   10,   11,   12,   18,
       15,  162,    4,    8,   15,    8,    8,    8,   16,   23,
      261,   18,   16,    8,    8,  162,  257,   21,   27,   16,
       42,   21,    8,    9,   25,   25,   25,    9,   21,    9,
       27,   42,   42,    9,    9,   33,   47,  247,  241,   33,
       35,    9,    9,   13,   35,   37,   33,   13,   13,   37,
      235,   35,   47,   13,   13,   14,   37,   40,   45,   14,

       52,   40,   45,  226,   52,   14,   14,   68,   40,   45,
      217,   52,   85,   73,   14,   17,   61,   73,   61,   17,
       77,   61,  215,   68,   73,   17,   17,   75,   85,   77,
      213,   75,   77,   80,   17,   22,   83,   80,   75,   22,
       83,  133,  133,  133,   80,   22,   22,   83,  212,   94,
      211,  208,  114,   94,   22,   24,  114,   24,   24,   24,
       94,  207,   99,  114,   99,   24,   24,   99,  130,  128,
      121,  200,  196,  128,   24,   29,  121,   29,   29,   29,
      128,  160,  121,  189,  130,  160,   29,   30,  172,   30,
       30,   30,  160,  186,  180,  172,  178,   30,   30,  165,

      172,  167,  177,  165,  170,  167,   30,   31,  170,   31,
      165,   31,  167,  219,   31,  170,  266,   31,   31,  176,
      184,  184,  184,  176,  195,  169,   31,   32,  195,  219,
      176,   32,  266,  159,  206,  195,  206,   32,   32,  206,
      221,  224,  158,  153,  221,  224,   32,   32,   34,  227,
      231,  221,   34,  227,  231,  144,  142,  224,  233,   34,
      227,  231,  233,  140,  236,  139,   34,   36,  236,  233,
      240,   36,   36,  281,  240,  236,  270,  281,   36,   43,
      246,  240,  246,   43,  281,  246,  252,  138,  252,   43,
       43,  252,  270,  310,  135,  290,  314,  310,   43,   46,

      314,  118,  116,   46,  310,  115,  111,  314,  106,   46,
       46,  290,  328,  328,  328,  103,  100,   95,   46,   49,
       49,   49,  353,  357,   82,   63,  353,  357,   62,   57,
       48,   44,   39,  353,  357,   49,   51,   28,   51,   51,
       51,   26,   20,  359,   19,  359,   51,   51,  359,    5,
        3,    0,    0,    0,    0,   51,   51,   53,    0,   53,
       53,   53,    0,    0,    0,    0,    0,    0,   53,    0,
        0,    0,    0,    0,    0,   53,   54,    0,   54,   54,
       54,    0,    0,    0,    0,    0,    0,   54,   55,    0,
       55,   55,   55,    0,    0,    0,    0,    0,   55,   55,

        0,    0,    0,    0,    0,    0,    0,   55,   58,    0,
       58,   58,   58,    0,    0,    0,    0,    0,    0,   58,
       60,    0,   60,    0,   60,    0,    0,   60,    0,    0,
       60,   60,    0,    0,    0,    0,    0,    0,    0,   60,
       65,    0,   65,    0,   65,    0,    0,   65,    0,    0,
        0,   65,   66,    0,   66,    0,   66,    0,    0,   66,
        0,    0,   66,   66,    0,    0,    0,    0,    0,    0,
        0,   66,   67,    0,    0,    0,   67,    0,    0,    0,
        0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
        0,   67,   67,   70,    0,    0,    0,   70,    0,    0,

        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,   70,   71,    0,    0,    0,   71,    0,
        0,    0,    0,    0,   71,   71,    0,    0,    0,    0,
        0,    0,    0,   71,   71,   72,    0,    0,    0,   72,
        0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,    0,    0,   72,   74,    0,    0,    0,
       74,    0,    0,    0,    0,    0,    0,   74,    0,    0,
        0,    0,    0,    0,   74,   76,    0,    0,    0,   76,
        0,    0,    0,    0,    0,   76,   76,    0,    0,    0,
        0,    0,    0,    0,   76,   76,   78,    0,    0,    0,

       78,    0,    0,    0,    0,    0,   78,   78,    0,    0,
        0,    0,    0,    0,    0,   78,   78,   79,    0,    0,
        0,   79,    0,    0,    0,    0,    0,    0,   79,    0,
        0,    0,    0,    0,    0,   79,   81,    0,    0,    0,
       81,    0,    0,    0,    0,    0,   81,   81,    0,    0,
        0,    0,    0,    0,    0,   81,   86,   86,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   86,   87,    0,   87,   87,   87,
        0,    0,    0,    0,    0,   87,   87,    0,    0,    0,
        0,    0,    0,    0,   87,   87,   88,   88,   88,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   88,   91,    0,   91,   91,   91,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,   91,   92,    0,   92,   92,
       92,    0,    0,    0,    0,    0,   92,   92,    0,    0,
        0,    0,    0,    0,    0,   92,   92,   93,    0,   93,
       93,   93,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,   93,   97,    0,
       97,   97,   97,    0,    0,    0,    0,    0,   97,   97,
        0,    0,    0,    0,    0,    0,    0,   97,   97,   98,

        0,   98,    0,    0,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,  101,    0,  101,    0,
      101,    0,    0,  101,    0,    0,  101,  101,    0,    0,
        0,    0,    0,    0,    0,  101,  101,  102,    0,  102,
        0,  102,    0,    0,  102,    0,    0,    0,  102,    0,
        0,    0,    0,    0,    0,  102,  104,    0,  104,    0,
      104,    0,    0,  104,    0,    0,    0,  104,  105,    0,
      105,    0,  105,    0,    0,  105,    0,    0,  105,  105,
        0,    0,    0,    0,    0,    0,    0,  105,  108,    0,
      108,    0,  108,    0,    0,  108,    0,    0,    0,  108,

      110,    0,    0,    0,  110,    0,    0,    0,    0,    0,
      110,  110,    0,    0,    0,    0,    0,    0,    0,  110,
      112,    0,    0,    0,  112,    0,    0,    0,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
      112,  113,    0,    0,    0,  113,    0,    0,    0,    0,
        0,    0,  113,    0,    0,    0,    0,    0,    0,    0,
        0,  113,  117,    0,    0,    0,  117,    0,    0,    0,
        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,  117,  119,    0,    0,    0,  119,    0,    0,
        0,    0,    0,  119,  119,    0,    0,    0,    0,    0,

        0,    0,  119,  120,    0,    0,    0,  120,    0,    0,
        0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
        0,    0,    0,  120,  122,    0,    0,    0,  122,    0,
        0,    0,    0,    0,  122,  122,    0,    0,    0,    0,
        0,    0,    0,  122,  122,  124,    0,    0,    0,  124,
        0,    0,    0,    0,    0,    0,  124,    0,    0,    0,
        0,    0,    0,    0,    0,  124,  125,    0,    0,    0,
      125,    0,    0,    0,    0,    0,  125,  125,    0,    0,
        0,    0,    0,    0,    0,  125,  125,  126,    0,    0,
        0,  126,    0,    0,    0,    0,    0,    0,  126,    0,

        0,    0,    0,    0,    0,    0,    0,  126,  127,    0,
        0,    0,  127,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,    0,    0,  127,  129,    0,    0,
        0,  129,    0,    0,    0,    0,    0,  129,  129,    0,
        0,    0,    0,    0,    0,    0,  129,  129,  131,  131,
      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  131,  132,    0,  132,
      132,  132,    0,    0,    0,    0,    0,  132,  132,    0,
        0,    0,    0,    0,    0,    0,  132,  134,    0,    0,
        0,  134,    0,    0,    0,    0,    0,    0,  134,    0,

        0,    0,    0,    0,    0,    0,    0,  134,  136,    0,
      136,  136,  136,    0,    0,    0,    0,    0,    0,  136,
        0,    0,    0,    0,    0,    0,    0,    0,  136,  137,
        0,  137,  137,  137,    0,    0,    0,    0,    0,    0,
      137,  141,    0,  141,  141,  141,    0,    0,    0,    0,
        0,    0,  141,    0,    0,    0,    0,    0,    0,    0,
        0,  141,  143,    0,  143,  143,  143,    0,    0,    0,
        0,    0,  143,  143,    0,    0,    0,    0,    0,    0,
        0,  143,  145,    0,  145,    0,    0,  145,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      145,  146,    0,  146,    0,  146,    0,    0,  146,    0,
        0,  146,  146,    0,    0,    0,    0,    0,    0,    0,
      146,  146,  147,    0,  147,    0,    0,  147,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      147,  150,    0,  150,    0,  150,    0,    0,  150,    0,
        0,    0,  150,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  151,    0,  151,    0,  151,    0,    0,  151,
        0,    0,  151,  151,    0,    0,    0,    0,    0,    0,
        0,  151,  151,  152,    0,  152,    0,  152,    0,    0,
      152,    0,    0,    0,  152,    0,    0,    0,    0,    0,

        0,    0,    0,  152,  156,    0,  156,    0,  156,    0,
        0,  156,    0,    0,  156,  156,    0,    0,    0,    0,
        0,    0,    0,  156,  156,  157,    0,    0,    0,  157,
        0,    0,    0,    0,    0,  157,  157,    0,    0,    0,
        0,    0,    0,    0,  157,  161,    0,    0,    0,  161,
        0,    0,    0,    0,    0,  161,  161,    0,    0,    0,
        0,    0,    0,    0,  161,  163,    0,    0,    0,  163,
        0,    0,    0,    0,    0,    0,  163,    0,    0,    0,
        0,    0,    0,    0,    0,  163,  164,    0,    0,    0,
      164,    0,    0,    0,    0,    0,    0,  164,    0,    0,

        0,    0,    0,    0,    0,    0,  164,  166,    0,    0,
        0,  166,    0,    0,    0,    0,    0,    0,  166,    0,
        0,    0,    0,    0,    0,  166,  173,    0,    0,    0,
      173,    0,    0,    0,    0,    0,  173,  173,    0,    0,
        0,    0,    0,    0,    0,  173,  174,    0,    0,    0,
      174,    0,    0,    0,    0,    0,    0,  174,    0,    0,
        0,    0,    0,    0,    0,    0,  174,  175,    0,    0,
        0,  175,    0,    0,    0,    0,    0,    0,  175,    0,
        0,    0,    0,    0,    0,    0,    0,  175,  179,    0,
        0,    0,  179,    0,    0,    0,    0,    0,    0,  179,

        0,    0,    0,    0,    0,    0,    0,    0,  179,  181,
        0,    0,    0,  181,    0,    0,    0,    0,    0,  181,
      181,    0,    0,    0,    0,    0,    0,    0,  181,  182,
        0,    0,    0,  182,    0,    0,    0,    0,    0,    0,
      182,    0,    0,    0,    0,    0,    0,    0,    0,  182,
      183,    0,  183,  183,  183,    0,    0,    0,    0,    0,
      183,  183,    0,    0,    0,    0,    0,    0,    0,  183,
      187,    0,  187,  187,  187,    0,    0,    0,    0,    0,
        0,  187,  188,    0,  188,  188,  188,    0,    0,    0,
        0,    0,  188,  188,    0,    0,    0,    0,    0,    0,

        0,  188,  190,  190,  190,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  190,  191,
        0,    0,    0,  191,    0,    0,    0,    0,    0,    0,
      191,    0,    0,    0,    0,    0,    0,    0,    0,  191,
      194,    0,  194,  194,  194,    0,    0,    0,    0,    0,
        0,  194,  197,    0,  197,  197,  197,    0,    0,    0,
        0,    0,    0,  197,  203,    0,  203,    0,    0,  203,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  203,  204,    0,  204,    0,    0,  204,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  204,  205,    0,  205,    0,  205,    0,    0,  205,
        0,    0,  205,  205,    0,    0,    0,    0,    0,    0,
        0,  205,  209,    0,  209,    0,  209,    0,    0,  209,
        0,    0,    0,  209,    0,    0,    0,    0,    0,    0,
        0,    0,  209,  210,    0,  210,    0,  210,    0,    0,
      210,    0,    0,    0,  210,  214,    0,  214,    0,  214,
        0,    0,  214,    0,    0,    0,  214,    0,    0,    0,
        0,    0,    0,    0,    0,  214,  216,    0,  216,    0,
      216,    0,    0,  216,    0,    0,  216,  216,    0,    0,
        0,    0,    0,    0,    0,  216,  218,    0,    0,    0,

      218,    0,    0,    0,    0,    0,  218,  218,    0,    0,
        0,    0,    0,    0,    0,  218,  218,  220,    0,    0,
        0,  220,    0,    0,    0,    0,    0,    0,  220,    0,
        0,    0,    0,    0,    0,  220,  222,    0,    0,    0,
      222,    0,    0,    0,    0,    0,    0,  222,    0,    0,
        0,    0,    0,    0,    0,    0,  222,  223,    0,    0,
        0,  223,    0,    0,    0,    0,    0,  223,  223,    0,
        0,    0,    0,    0,    0,    0,  223,  223,  225,    0,
        0,    0,  225,    0,    0,    0,    0,    0,  225,  225,
        0,    0,    0,    0,    0,    0,    0,  225,  228,    0,

        0,    0,  228,    0,    0,    0,    0,    0,  228,  228,
        0,    0,    0,    0,    0,    0,    0,  228,  229,    0,
        0,    0,  229,    0,    0,    0,    0,    0,    0,  229,
        0,    0,    0,    0,    0,    0,    0,    0,  229,  230,
        0,    0,    0,  230,    0,    0,    0,    0,    0,    0,
      230,    0,    0,    0,    0,    0,    0,    0,    0,  230,
      232,    0,    0,    0,  232,    0,    0,    0,    0,    0,
        0,  232,    0,    0,    0,    0,    0,    0,  232,  238,
        0,  238,  238,  238,    0,    0,    0,    0,    0,  238,
      238,    0,    0,    0,    0,    0,    0,    0,  238,  238,

      239,  239,  239,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  243,
        0,  243,  243,  243,    0,    0,    0,    0,    0,    0,
      243,    0,    0,    0,    0,    0,    0,    0,    0,  243,
      244,    0,  244,  244,  244,    0,    0,    0,    0,    0,
      244,  244,    0,    0,    0,    0,    0,    0,    0,  244,
      244,  245,    0,  245,    0,  245,    0,    0,  245,    0,
        0,  245,  245,    0,    0,    0,    0,    0,    0,    0,
      245,  249,    0,  249,    0,  249,    0,    0,  249,    0,
        0,    0,  249,  250,    0,  250,    0,  250,    0,    0,

      250,    0,    0,  250,  250,    0,    0,    0,    0,    0,
        0,    0,  250,  251,    0,  251,    0,    0,  251,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  251,
      256,    0,  256,    0,  256,    0,    0,  256,    0,    0,
        0,  256,  259,    0,  259,    0,  259,    0,    0,  259,
        0,    0,    0,  259,  265,    0,    0,    0,  265,    0,
        0,    0,    0,    0,  265,  265,    0,    0,    0,    0,
        0,    0,    0,  265,  265,  268,    0,    0,    0,  268,
        0,    0,    0,    0,    0,    0,  268,    0,    0,    0,
        0,    0,    0,    0,    0,  268,  269,    0,    0,    0,

      269,    0,    0,    0,    0,    0,  269,  269,    0,    0,
        0,    0,    0,    0,    0,  269,  269,  271,    0,    0,
        0,  271,    0,    0,    0,    0,    0,    0,  271,    0,
        0,    0,    0,    0,    0,    0,    0,  271,  272,    0,
        0,    0,  272,    0,    0,    0,    0,    0,    0,  272,
        0,    0,    0,    0,    0,    0,    0,    0,  272,  273,
        0,    0,    0,  273,    0,    0,    0,    0,    0,    0,
      273,    0,    0,    0,    0,    0,    0,    0,    0,  273,
      276,    0,    0,    0,  276,    0,    0,    0,    0,    0,
        0,  276,    0,    0,    0,    0,    0,    0,    0,    0,

      276,  279,    0,    0,    0,  279,    0,    0,    0,    0,
        0,  279,  279,    0,    0,    0,    0,    0,    0,    0,
      279,  279,  280,    0,    0,    0,  280,    0,    0,    0,
        0,    0,    0,  280,    0,    0,    0,    0,    0,    0,
      280,  282,    0,    0,    0,  282,    0,    0,    0,    0,
        0,    0,  282,    0,    0,    0,    0,    0,    0,    0,
        0,  282,  283,    0,    0,    0,  283,    0,    0,    0,
        0,    0,  283,  283,    0,    0,    0,    0,    0,    0,
        0,  283,  283,  284,    0,  284,  284,  284,    0,    0,
        0,    0,    0,  284,  284,    0,    0,    0,    0,    0,

        0,    0,  284,  284,  285,  285,  285,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  285,  288,    0,  288,  288,  288,    0,    0,
        0,    0,    0,    0,  288,    0,    0,    0,    0,    0,
        0,    0,    0,  288,  289,    0,  289,  289,  289,    0,
        0,    0,    0,    0,  289,  289,    0,    0,    0,    0,
        0,    0,    0,  289,  289,  291,  291,  291,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  291,  292,    0,  292,  292,  292,    0,
        0,    0,    0,    0,    0,  292,    0,    0,    0,    0,

        0,    0,    0,    0,  292,  293,    0,    0,    0,  293,
        0,    0,    0,    0,    0,    0,  293,    0,    0,    0,
        0,    0,    0,    0,    0,  293,  295,    0,  295,  295,
      295,    0,    0,    0,    0,    0,    0,  295,    0,    0,
        0,    0,    0,    0,    0,    0,  295,  301,    0,  301,
        0,  301,    0,    0,  301,    0,    0,  301,  301,    0,
        0,    0,    0,    0,    0,    0,  301,  301,  302,    0,
      302,    0,    0,  302,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  302,  306,    0,  306,
        0,  306,    0,    0,  306,    0,    0,    0,  306,    0,

        0,    0,    0,    0,    0,    0,    0,  306,  307,    0,
      307,    0,  307,    0,    0,  307,    0,    0,  307,  307,
        0,    0,    0,    0,    0,    0,    0,  307,  307,  308,
        0,    0,    0,  308,    0,    0,    0,    0,    0,  308,
      308,    0,    0,    0,    0,    0,    0,    0,  308,  311,
        0,    0,    0,  311,    0,    0,    0,    0,    0,  311,
      311,    0,    0,    0,    0,    0,    0,    0,  311,  312,
        0,    0,    0,  312,    0,    0,    0,    0,    0,    0,
      312,    0,    0,    0,    0,    0,    0,    0,    0,  312,
      313,    0,    0,    0,  313,    0,    0,    0,    0,    0,

        0,  313,    0,    0,    0,    0,    0,    0,    0,    0,
      313,  316,    0,    0,    0,  316,    0,    0,    0,    0,
        0,  316,  316,    0,    0,    0,    0,    0,    0,    0,
      316,  316,  318,    0,    0,    0,  318,    0,    0,    0,
        0,    0,    0,  318,    0,    0,    0,    0,    0,    0,
        0,    0,  318,  319,    0,    0,    0,  319,    0,    0,
        0,    0,    0,  319,  319,    0,    0,    0,    0,    0,
        0,    0,  319,  319,  320,    0,    0,    0,  320,    0,
        0,    0,    0,    0,    0,  320,    0,    0,    0,    0,
        0,    0,    0,    0,  320,  321,    0,    0,    0,  321,

        0,    0,    0,    0,    0,    0,  321,    0,    0,    0,
        0,    0,    0,    0,    0,  321,  322,    0,    0,    0,
      322,    0,    0,    0,    0,    0,    0,  322,    0,    0,
        0,    0,    0,    0,    0,    0,  322,  325,    0,    0,
        0,  325,    0,    0,    0,    0,    0,    0,  325,    0,
        0,    0,    0,    0,    0,    0,    0,  325,  327,    0,
      327,  327,  327,    0,    0,    0,    0,    0,  327,  327,
        0,    0,    0,    0,    0,    0,    0,  327,  329,    0,
      329,  329,  329,    0,    0,    0,    0,    0,    0,  329,
      330,    0,  330,  330,  330,    0,    0,    0,    0,    0,

      330,  330,    0,    0,    0,    0,    0,    0,    0,  330,
      331,    0,    0,    0,  331,    0,    0,    0,    0,    0,
        0,  331,    0,    0,    0,    0,    0,    0,    0,    0,
      331,  335,    0,  335,    0,  335,    0,    0,  335,    0,
        0,  335,  335,    0,    0,    0,    0,    0,    0,    0,
      335,  335,  336,    0,  336,    0,    0,  336,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      336,  339,    0,  339,    0,  339,    0,    0,  339,    0,
        0,    0,  339,    0,    0,    0,    0,    0,    0,    0,
        0,  339,  340,    0,  340,    0,  340,    0,    0,  340,

        0,    0,  340,  340,    0,    0,    0,    0,    0,    0,
        0,  340,  340,  341,    0,  341,    0,    0,  341,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  341,  342,    0,  342,    0,    0,  342,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      342,  343,    0,  343,    0,  343,    0,    0,  343,    0,
        0,    0,  343,    0,    0,    0,    0,    0,    0,    0,
        0,  343,  346,    0,  346,    0,  346,    0,    0,  346,
        0,    0,    0,  346,    0,    0,    0,    0,    0,    0,
        0,    0,  346,  352,    0,    0,    0,  352,    0,    0,

        0,    0,    0,  352,  352,    0,    0,    0,    0,    0,
        0,    0,  352,  354,    0,    0,    0,  354,    0,    0,
        0,    0,    0,  354,  354,    0,    0,    0,    0,    0,
        0,    0,  354,  355,    0,    0,    0,  355,    0,    0,
        0,    0,    0,    0,  355,    0,    0,    0,    0,    0,
        0,    0,    0,  355,  356,    0,    0,    0,  356,    0,
        0,    0,    0,    0,    0,  356,    0,    0,    0,    0,
        0,    0,    0,    0,  356,  358,    0,  358,    0,  358,
        0,    0,  358,    0,    0,  358,  358,    0,    0,    0,
        0,    0,    0,    0,  358,  360,    0,  360,    0,  360,

        0,    0,  360,    0,    0,    0,  360,  361,    0,  361,
        0,  361,    0,    0,  361,    0,    0,  361,  361,    0,
        0,    0,    0,    0,    0,    0,  361,  367,  367,  368,
      368,  369,  369,    0,  369,  370,  370,  371,  371,  372,
      372,  373,  373,    0,  373,  374,  374,    0,  374,  375,
      375,    0,  375,  376,  376,    0,  376,  377,  377,    0,
      377,  378,  378,  379,  379,  380,  380,  381,  381,  382,
      382,  383,  383,    0,  383,  384,  384,    0,  384,  385,
      385,    0,  385,  386,  386,    0,  386,  387,  387,    0,
      387,  388,  388,    0,  388,  389,  389,  390,  390,  391,

      391,  392,  392,  393,  393,    0,  393,  394,  394,    0,
      394,  395,  395,    0,  395,  396,  396,    0,  396,  397,
      397,    0,  397,  398,  398,  399,  399,  400,  400,  401,
      401,  402,  402,  403,  403,  404,  404,  405,  405,    0,
      405,  406,  406,    0,  406,  407,  407,    0,  407,  408,
      408,    0,  408,  409,  409,    0,  409,  410,  410,    0,
      410,  411,  411,    0,  411,  412,  412,    0,  412,  413,
      413,  414,  414,  415,  415,  416,  416,  417,  417,  418,
      418,    0,  418,  419,  419,    0,  419,  420,  420,    0,
      420,  421,  421,    0,  421,  422,  422,    0,  422,  423,

      423,    0,  423,  424,  424,  425,  425,  426,  426,  427,
      427,  428,  428,  429,  429,    0,  429,  430,  430,    0,
      430,  431,  431,    0,  431,  432,  432,    0,  432,  433,
      433,    0,  433,  434,  434,  436,  436,  437,  437,  438,
      438,  439,  439,    0,  439,  440,  440,    0,  440,  441,
      441,    0,  441,  442,  442,    0,  442,  443,  443,    0,
      443,  444,  444,  445,  445,  446,  446,  447,  447,  448,
      448,  449,  449,    0,  449,  450,  450,    0,  450,  451,
      451,    0,  451,  452,  452,    0,  452,  453,  453,    0,
      453,  454,  454,  455,  455,  456,  456,  457,  457,    0,

      457,  458,  458,    0,  458,  459,  459,    0,  459,  460,
      460,    0,  460,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[19] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 13 "shell.l"

#include <cstring>
#include "y.tab.hh"
#include <sys/wait.h>
#include <string.h>
#include "shell.hh"
#include <unistd.h>


static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

  if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

#line 1458 "lex.yy.cc"
#line 1459 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 58 "shell.l"


#line 1679 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 367 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3614 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 60 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 88 "shell.l"
{
  return GREATAND;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return GREATGREATAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "shell.l"
{
  //Tilde expansion
  std::string text = std::string(yytext);
  std::string home_dir = getenv("HOME");
  if (!strcmp(yytext, "~")) {
    yylval.cpp_string = new std::string(home_dir);
  } else {
    if (text[1] == '/') {
      text = home_dir + text.substr(1, -1);
    } else {
      text = std::string("/homes/") + text.substr(1,-1);
    }
    yylval.cpp_string = new std::string(text);
  }
  return WORD;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "shell.l"
{
  //escape characters
  std::string for_len = std::string(yytext);
  int length = for_len.size();
  char * text = strdup(yytext);
  int i = 0;
  int j = 0;
  char * new_text = new char[length];
  while (text[i] != 0) {
    if (text[i] == '\\') {
      i++;
    }
    if (text[i] != 0) {
      new_text[j] = text[i];
      j++;
    }
    i++;
  }
  yylval.cpp_string = new std::string(new_text);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 142 "shell.l"
{
  //environment variable expansion
  char * text = yytext;
  std::string result = "";
  int i = 0;
  char cur = text[i];
  while (cur != 0) {
    if ((cur == '$') && (text[i + 1] == '{')) {
      std::string toExpand = "";
      std::string expanded;
      int j = i + 2;
      while (text[j] != '}') {
        toExpand += text[j];
        j++;
      }
      i = j;
      expanded = getenv(toExpand.c_str());
      result.append(expanded);
    } else {
      result += text[i];
    }
    i++;
    cur = text[i];
  }
  yylval.cpp_string = new std::string(result);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 171 "shell.l"
{
  //subshell
  std::string command = std::string(yytext);
  command = command.substr(2, command.size() - 3);
  command = command.append("\nexit\n");

  int pin[2];
  int pout[2];
  int tmpin;
  int tmpout;
  tmpin = dup(0);
  tmpout = dup(1);
  pipe(pin);
  pipe(pout);
  dup2(pin[0], 0); //redirect input from pin[0]
  dup2(pout[1], 1); //redirect output to pout[1]
  close(pin[0]);
  close(pout[1]);
  write(pin[1], command.c_str(), command.size());
  close(pin[1]);

  int ret = fork();
  if (ret == 0) {
    char ** arguments = new char*[2];
    arguments[0] = (char*) "/proc/self/exe";
    arguments[1] = NULL;
    execvp(arguments[0], arguments);
    exit(1);
  }
  dup2(tmpin, 0);
  dup2(tmpout, 1);
  close(tmpin);
  close(tmpout);
  char* sub_out = new char[2048];
  int numRead = read(pout[0], sub_out, 2048);
  close(pout[0]);
  for (int i = numRead - 1; i >= 0; i--) {
    if (sub_out[i] == '\n') {
      sub_out[i] = ' ';
    }
    myunputc(sub_out[i]);
  }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 217 "shell.l"
{
  std::string text = std::string(yytext);
  const char * file_name = std::string(text.substr(7, text.size() - 7)).c_str();
  FILE * fp = fopen(file_name, "r+");
  if (fp) {
    fputc('\n', fp);
    yypush_buffer_state(yy_create_buffer(fp, YY_BUF_SIZE));
    BEGIN(INITIAL);
    yyparse();
    yypop_buffer_state();
    fclose(fp);
  }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 232 "shell.l"
{
  /* Assume that file names have only alpha chars */

  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 240 "shell.l"
{
  std::string text = std::string(yytext);
  yylval.cpp_string = new std::string(text.substr(1, text.size() - 2));
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 247 "shell.l"
ECHO;
	YY_BREAK
#line 1981 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 367 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 367 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 366);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 247 "shell.l"
